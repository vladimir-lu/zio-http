"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[525],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=s(a),d=o,u=k["".concat(i,".").concat(d)]||k[d]||m[d]||r;return a?n.createElement(u,c(c({ref:t},p),{},{components:a})):n.createElement(u,c({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,c=new Array(r);c[0]=k;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<r;s++)c[s]=a[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6918:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return i},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),c=["components"],l={title:"Socket",sidebar_label:"Socket"},i=void 0,s={unversionedId:"v1.x/dsl/socket/socket",id:"v1.x/dsl/socket/socket",isDocsHomePage:!1,title:"Socket",description:"Socket[-R, +E, -A, +B] models a function from A to ZStream[R, E, B]. When a value of type A is evaluated against a Socket[R, E, A, B], it can either succeed with a stream of values of type B, or fail with an E, and it could have its requirement on R.",source:"@site/docs/v1.x/dsl/socket/socket.md",sourceDirName:"v1.x/dsl/socket",slug:"/v1.x/dsl/socket/socket",permalink:"/zio-http/docs/v1.x/dsl/socket/socket",tags:[],version:"current",frontMatter:{title:"Socket",sidebar_label:"Socket"},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/zio-http/docs/v1.x/dsl/middleware"},next:{title:"WebSocketFrame",permalink:"/zio-http/docs/v1.x/dsl/socket/websocketframe"}},p=[{value:"Creating Sockets",id:"creating-sockets",children:[{value:"An empty Socket",id:"an-empty-socket",children:[],level:3},{value:"Socket that has ended",id:"socket-that-has-ended",children:[],level:3},{value:"Socket that always succeeds",id:"socket-that-always-succeeds",children:[],level:3},{value:"Socket that echoes the message",id:"socket-that-echoes-the-message",children:[],level:3},{value:"Socket from a partial function",id:"socket-from-a-partial-function",children:[],level:3},{value:"Socket from a function",id:"socket-from-a-function",children:[],level:3},{value:"Socket from a ZStream",id:"socket-from-a-zstream",children:[],level:3}],level:2},{value:"Composing Sockets",id:"composing-sockets",children:[{value:"Using <code>merge</code>",id:"using-merge",children:[],level:3}],level:2},{value:"Transforming Sockets",id:"transforming-sockets",children:[{value:"<code>map</code> over a Socket&#39;s output channel",id:"map-over-a-sockets-output-channel",children:[],level:3},{value:"<code>contramap</code> over a Socket&#39;s input channel",id:"contramap-over-a-sockets-input-channel",children:[],level:3}],level:2},{value:"Providing environment",id:"providing-environment",children:[{value:"Using <code>provideEnvironment</code>",id:"using-provideenvironment",children:[],level:3}],level:2},{value:"Special operators on Socket",id:"special-operators-on-socket",children:[{value:"<code>toHttp</code>",id:"tohttp",children:[],level:3},{value:"<code>toResponse</code>",id:"toresponse",children:[],level:3},{value:"<code>toSocketApp</code>",id:"tosocketapp",children:[],level:3}],level:2}],m={toc:p};function k(e){var t=e.components,a=(0,o.Z)(e,c);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Socket[-R, +E, -A, +B]")," models a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"ZStream[R, E, B]"),". When a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," is evaluated against a ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, E, A, B]"),", it can either succeed with a stream of values of type ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),", or fail with an ",(0,r.kt)("inlineCode",{parentName:"p"},"E"),", and it could have its requirement on ",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"."),(0,r.kt)("h2",{id:"creating-sockets"},"Creating Sockets"),(0,r.kt)("h3",{id:"an-empty-socket"},"An empty Socket"),(0,r.kt)("p",null,"To create an empty Socket, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"empty")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val socket = Socket.empty\n")),(0,r.kt)("h3",{id:"socket-that-has-ended"},"Socket that has ended"),(0,r.kt)("p",null,"To create a Socket that has ended, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val socket = Socket.end\n")),(0,r.kt)("h3",{id:"socket-that-always-succeeds"},"Socket that always succeeds"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"succeed")," constructor to create a Socket that always returns the same response and never fails."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val socket = Socket.succeed(WebSocketFrame.text("Hello, from ZIO-HTTP"))\n')),(0,r.kt)("h3",{id:"socket-that-echoes-the-message"},"Socket that echoes the message"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"echo")," constructor to create a Socket that always echoes back the message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val socket = Socket.echo(WebSocketFrame.text("Hello, from ZIO-HTTP"))\n')),(0,r.kt)("h3",{id:"socket-from-a-partial-function"},"Socket from a partial function"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Socket.collect")," can create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, E, A, B]")," from a ",(0,r.kt)("inlineCode",{parentName:"p"},"PartialFunction[A, B]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val fromCollect = Socket.collect[WebSocketFrame] {\n  case WebSocketFrame.Text("fail") => ZStream.fail(new Exception("error"))\n  case WebSocketFrame.Text(text)   => ZStream.succeed(text)\n}\n')),(0,r.kt)("h3",{id:"socket-from-a-function"},"Socket from a function"),(0,r.kt)("p",null,"To create a Socket from a function, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromFunction")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val socket = Socket.fromFunction[WebSocketFrame](wsf => ZStream.succeed(wsf))\n")),(0,r.kt)("h3",{id:"socket-from-a-zstream"},"Socket from a ZStream"),(0,r.kt)("p",null,"To create a socket from a ",(0,r.kt)("inlineCode",{parentName:"p"},"ZStream[R, E, B]"),", you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromStream")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val transducer = ZTransducer[Int].map(elem => WebSocketFrame.Text(elem.toString))\nval stream     = ZStream\n  .fromIterable((0 to 10))\n  .transduce(transducer)\n\nval socket = Socket.fromStream(stream)\n")),(0,r.kt)("h2",{id:"composing-sockets"},"Composing Sockets"),(0,r.kt)("h3",{id:"using-merge"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"merge")),(0,r.kt)("p",null,"You can merge two Sockets using the ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," operator, the resulting Socket will emit the values of both Sockets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val s1 = Socket.succeed(WebSocketFrame.text("Hello, from ZIO-HTTP"))\nval s2 = Socket.succeed(WebSocketFrame.text("Welcome to the party"))\nval socket = s1 merge s2\n')),(0,r.kt)("h2",{id:"transforming-sockets"},"Transforming Sockets"),(0,r.kt)("h3",{id:"map-over-a-sockets-output-channel"},(0,r.kt)("inlineCode",{parentName:"h3"},"map")," over a Socket's output channel"),(0,r.kt)("p",null,"Socket is a domain, so you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," to transform the output of a Socket from type ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, E, A, B]")," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, E, A, C]"),", it takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"B => Socket[R, E, A, C]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val sc     = Socket.succeed("Hello, from ZIO-HTTP")\nval socket = sc.map(text => WebSocketFrame.text(text))\n')),(0,r.kt)("p",null,"You can also transform the output of a Socket effecfully using the ",(0,r.kt)("inlineCode",{parentName:"p"},"mapZIO")," operator. It takes a function\n",(0,r.kt)("inlineCode",{parentName:"p"},"B => ZIO[R, E, C]")," and returns a Socket of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, E, A, C]"),"."),(0,r.kt)("h3",{id:"contramap-over-a-sockets-input-channel"},(0,r.kt)("inlineCode",{parentName:"h3"},"contramap")," over a Socket's input channel"),(0,r.kt)("p",null,"Socket also comes with a contramap operator that lets you map over the input of Socket before it gets passed over to it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val sc     = Socket.collect[String] { case text => ZStream(text) }\nval socket = sc.contramap[WebSocketFrame.Text](wsf => wsf.text)\n\nval res = socket(WebSocketFrame.Text("Hello, from ZIO-HTTP"))\n')),(0,r.kt)("p",null," Additionally, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contramapZIO")," operator to transform the input of a Socket effectfully."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val sc     = Socket.collect[String] { case text => ZStream(text) }\nval socket = sc.contramapZIO[Any, Throwable, WebSocketFrame.Text](wsf => ZIO(wsf.text))\n\nval res = socket(WebSocketFrame.Text("Hello, from ZIO-HTTP"))\n')),(0,r.kt)("h2",{id:"providing-environment"},"Providing environment"),(0,r.kt)("h3",{id:"using-provideenvironment"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"provideEnvironment")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"provideEnvironment")," operator to provide a Socket with its required environment, which eliminates its dependency on R."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This operation assumes that the Socket requires an environment of type ",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val socket = Socket\n  .fromStream(ZStream.environment[WebSocketFrame])\n  .provideEnvironment(WebSocketFrame.text("Hello, from ZIO-HTTP"))\n')),(0,r.kt)("h2",{id:"special-operators-on-socket"},"Special operators on Socket"),(0,r.kt)("p",null,"There are special operators on Socket that let you transform it into other entities in ZIO-HTTP"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"These operators only work if the Socket is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Socket[R, Throwable, WebSocketFrame, WebSocketFrame]")))),(0,r.kt)("h3",{id:"tohttp"},(0,r.kt)("inlineCode",{parentName:"h3"},"toHttp")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"toHttp")," operator to convert a Socket to an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP[-R, +E, +A, -B]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val http = Socket.succeed(WebSocketFrame.text("Hello, from ZIO-HTTP")).toHttp\n')),(0,r.kt)("h3",{id:"toresponse"},(0,r.kt)("inlineCode",{parentName:"h3"},"toResponse")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"toResponse")," operator to convert a Socket to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Response"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val response = Socket.succeed(WebSocketFrame.text("Hello, from ZIO-HTTP")).toResponse\n')),(0,r.kt)("h3",{id:"tosocketapp"},(0,r.kt)("inlineCode",{parentName:"h3"},"toSocketApp")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"toSocketApp")," operator to covert a Socket to a ",(0,r.kt)("inlineCode",{parentName:"p"},"SocketApp"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val app = Socket.succeed(WebSocketFrame.text("Hello, from ZIO-HTTP")).toSocketApp\n')))}k.isMDXComponent=!0}}]);
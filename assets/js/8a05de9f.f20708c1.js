"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[836],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||s;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4441:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),o=["components"],i={sidebar_position:"6"},d="Headers",l={unversionedId:"v1.x/dsl/headers",id:"v1.x/dsl/headers",isDocsHomePage:!1,title:"Headers",description:"ZIO HTTP provides support for all HTTP headers (as defined in RFC2616 ) along with  custom headers.",source:"@site/docs/v1.x/dsl/headers.md",sourceDirName:"v1.x/dsl",slug:"/v1.x/dsl/headers",permalink:"/zio-http/docs/v1.x/dsl/headers",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"HttpData",permalink:"/zio-http/docs/v1.x/dsl/httpdata"},next:{title:"Cookie",permalink:"/zio-http/docs/v1.x/dsl/cookies"}},p=[{value:"Server-side",id:"server-side",children:[{value:"Attaching Headers to <code>Response</code>",id:"attaching-headers-to-response",children:[],level:3},{value:"Reading Headers from <code>Request</code>",id:"reading-headers-from-request",children:[],level:3}],level:2},{value:"Client-side",id:"client-side",children:[{value:"Adding headers to <code>Request</code>",id:"adding-headers-to-request",children:[],level:3},{value:"Reading headers from <code>Response</code>",id:"reading-headers-from-response",children:[],level:3}],level:2},{value:"Headers DSL",id:"headers-dsl",children:[],level:2}],c={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"headers"},"Headers"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"ZIO HTTP")," provides support for all HTTP headers (as defined in ",(0,s.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc2616"},"RFC2616")," ) along with  custom headers."),(0,s.kt)("h2",{id:"server-side"},"Server-side"),(0,s.kt)("h3",{id:"attaching-headers-to-response"},"Attaching Headers to ",(0,s.kt)("inlineCode",{parentName:"h3"},"Response")),(0,s.kt)("p",null,"On the server-side, ",(0,s.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," is adding a collection of pre-defined headers to the response, according to the HTTP specification, additionally, users may add other headers, including custom headers."),(0,s.kt)("p",null,"There are multiple ways to attach headers to a response:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Using ",(0,s.kt)("inlineCode",{parentName:"p"},"addHeaders")," helper on response."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'val res = Response.ok.addHeader("content-length", "0")\n'))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Through ",(0,s.kt)("inlineCode",{parentName:"p"},"Response")," constructors."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"val res = Response(\n       status = Status.OK,\n       // Setting response header \n       headers = Headers.contentLength(0L),\n       data = HttpData.empty\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Using ",(0,s.kt)("inlineCode",{parentName:"p"},"Middlewares"),"."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'val app = Http.ok @@ Middleware.addHeader("content-length", "0")\n')))),(0,s.kt)("h3",{id:"reading-headers-from-request"},"Reading Headers from ",(0,s.kt)("inlineCode",{parentName:"h3"},"Request")),(0,s.kt)("p",null,"On the Server-side you can read Request headers as given below"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},' case req @ Method.GET -> !! / "streamOrNot" =>\n      req.getHeaders\n')),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("b",null,"Detailed examples ")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Example below shows how the Headers could be added to a response by using ",(0,s.kt)("inlineCode",{parentName:"p"},"Response")," constructors and how a custom header is added to ",(0,s.kt)("inlineCode",{parentName:"p"},"Response")," through ",(0,s.kt)("inlineCode",{parentName:"p"},"addHeader"),":"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\nimport zhttp.service.Server\nimport zio.{App, Chunk, ExitCode, URIO}\nimport zio.stream.ZStream\n\nobject SimpleResponseDispatcher extends App {\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = {\n\n    // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n    Server.start(8090, app.silent).exitCode\n  }\n\n  // Create a message as a Chunk[Byte]\n  val message                    = Chunk.fromArray("Hello world !\\r\\n".getBytes(HTTP_CHARSET))\n  // Use `Http.collect` to match on route\n  val app: HttpApp[Any, Nothing] = Http.collect[Request] {\n\n    // Simple (non-stream) based route\n    case Method.GET -> !! / "health" => Response.ok\n\n    // From Request(req), the headers are accessible.\n    case req @ Method.GET -> !! / "streamOrNot" =>\n      // Checking if client is able to handle streaming response\n      val acceptsStreaming: Boolean = req.hasHeader(HeaderNames.accept, HeaderValues.applicationOctetStream)\n      if (acceptsStreaming)\n        Response(\n          status = Status.OK,\n          // Setting response header \n          headers = Headers.contentLength(message.length.toLong), // adding CONTENT-LENGTH header\n          data = HttpData.fromStream(ZStream.fromChunk(message)), // Encoding content using a ZStream\n        )\n      else { \n        // Adding a custom header to Response\n        Response(status = Status.ACCEPTED, data = HttpData.fromChunk(message)).addHeader("X-MY-HEADER", "test")\n      }\n  }\n}\n\n'))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The following example shows how Headers could be added to ",(0,s.kt)("inlineCode",{parentName:"p"},"Response")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Middleware")," implementation:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"\n  /**\n   * Creates an authentication middleware that only allows authenticated requests to be passed on to the app.\n   */\n  final def customAuth(\n    verify: Headers => Boolean,\n    responseHeaders: Headers = Headers.empty,\n  ): HttpMiddleware[Any, Nothing] =\n    Middleware.ifThenElse[Request](req => verify(req.getHeaders))(\n      _ => Middleware.identity,\n      _ => Middleware.fromHttp(Http.status(Status.FORBIDDEN).addHeaders(responseHeaders)),\n    )\n\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"More examples:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/BasicAuth.scala"},"BasicAuth")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/Authentication.scala"},"Authentication")))))),(0,s.kt)("h2",{id:"client-side"},"Client-side"),(0,s.kt)("h3",{id:"adding-headers-to-request"},"Adding headers to ",(0,s.kt)("inlineCode",{parentName:"h3"},"Request")),(0,s.kt)("p",null,"ZIO-HTTP provides a simple way to add headers to a client ",(0,s.kt)("inlineCode",{parentName:"p"},"Request"),". "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'val headers = Headers.host("sports.api.decathlon.com").withAccept(HeaderValues.applicationJson)\nval response = Client.request(url, headers)\n')),(0,s.kt)("h3",{id:"reading-headers-from-response"},"Reading headers from ",(0,s.kt)("inlineCode",{parentName:"h3"},"Response")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"val responseHeaders: Task[Headers] =  Client.request(url).map(_.headers)\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("b",null,"Detailed examples")," "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The sample below shows how a header could be added to a client request:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\nimport zhttp.service._\nimport zio._\n\nobject SimpleClientJson extends App {\n  val env     = ChannelFactory.auto ++ EventLoopGroup.auto()\n  val url     = "http://sports.api.decathlon.com/groups/water-aerobics"\n  // Construct headers\n  val headers = Headers.host("sports.api.decathlon.com").withAccept(HeaderValues.applicationJson) \n\n  val program = for {\n    // Pass headers to request\n    res  <- Client.request(url, headers)\n    // List all response headers\n    _    <- console.putStrLn(res.headers.toList.mkString("\\n"))\n    data <-\n      // Check if response contains a specified header with a specified value.\n      if (res.hasHeader(HeaderNames.contentType, HeaderValues.applicationJson))\n        res.bodyAsString\n      else\n        res.bodyAsString\n    _    <- console.putStrLn { data }\n  } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = program.exitCode.provideCustomLayer(env)\n\n}\n'))))),(0,s.kt)("h2",{id:"headers-dsl"},"Headers DSL"),(0,s.kt)("p",null,"Headers DSL provides plenty of powerful operators that can be used to add, remove, modify and verify headers. Headers APIs could be used on client, server, and middleware."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"zhttp.http.Headers"),"      - represents an immutable collection of headers i.e. essentially a ",(0,s.kt)("inlineCode",{parentName:"p"},"Chunk[(String, String)]"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"zhttp.http.HeaderNames"),"  - commonly used header names."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"zhttp.http.HeaderValues")," - commonly used header values"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Headers")," have following type of helpers"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Constructors -  Provides a list of helpful methods that can create ",(0,s.kt)("inlineCode",{parentName:"p"},"Headers"),"."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\n// create a simple Accept header:\nval acceptHeader: Headers = Headers.accept(HeaderValues.applicationJson)\n\n// create a basic authentication header:\nval basicAuthHeader: Headers = Headers.basicAuthorizationHeader("username", "password")\n'))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Getters - Provides a list of operators that parse and extract data from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Headers"),"."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\n// retrieving the value of Accept header value:\nval acceptHeader: Headers = Headers.accept(HeaderValues.applicationJson)\nval acceptHeaderValue: Option[CharSequence] = acceptHeader.getAccept\n\n\n// retrieving a bearer token from Authorization header:\nval authorizationHeader: Headers                   = Headers.authorization("Bearer test")\nval authorizationHeaderValue: Option[String]       = authorizationHeader.getBearerToken\n'))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Modifiers - Provides a list of operators that modify the current ",(0,s.kt)("inlineCode",{parentName:"p"},"Headers"),". Once modified, a new instance of the same type is returned."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\n// add Accept header:\nval headers = Headers.empty\nval updatedHeadersList: Headers = headers.addHeaders(Headers.accept(HeaderValues.applicationJson))\n\n// or if you prefer the builder pattern:\n\n// add Host header:\nval moreHeaders: Headers        = headers.withHost("zio-http.dream11.com")\n\n'))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Checks - Provides a list of operators that checks if the ",(0,s.kt)("inlineCode",{parentName:"p"},"Headers")," meet the give constraints."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"val contentTypeHeader: Headers = Headers.contentType(HeaderValues.applicationJson)\nval isHeaderPresent: Boolean   = contentTypeHeader.hasHeader(HeaderNames.contentType) \nval isJsonContentType: Boolean = contentTypeHeader.hasJsonContentType\n\n\n")))))}u.isMDXComponent=!0}}]);